#version: '3.9'

networks:
  net:
    driver: bridge

services:
  chromadb:
    container_name: chromadb
    hostname: chromadb
    image: chromadb/chroma:0.6.2  # 0.6.2까지만 api v1 지원.
    volumes:
      # Be aware that indexed data are located in "/chroma/chroma/"
      # Default configuration for persist_directory in chromadb/config.py
      # Read more about deployments: https://docs.trychroma.com/deployment
      - chroma-data:/chroma/chroma
    command: "--workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30"
    environment:
      - IS_PERSISTENT=TRUE
      - CHROMA_SERVER_AUTHN_PROVIDER=${CHROMA_SERVER_AUTHN_PROVIDER}
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=${CHROMA_SERVER_AUTHN_CREDENTIALS_FILE}
      - CHROMA_SERVER_AUTHN_CREDENTIALS=${CHROMA_SERVER_AUTHN_CREDENTIALS}
      - CHROMA_AUTH_TOKEN_TRANSPORT_HEADER=${CHROMA_AUTH_TOKEN_TRANSPORT_HEADER}
      - PERSIST_DIRECTORY=${PERSIST_DIRECTORY:-/chroma/chroma}
      - CHROMA_OTEL_EXPORTER_ENDPOINT=${CHROMA_OTEL_EXPORTER_ENDPOINT}
      - CHROMA_OTEL_EXPORTER_HEADERS=${CHROMA_OTEL_EXPORTER_HEADERS}
      - CHROMA_OTEL_SERVICE_NAME=${CHROMA_OTEL_SERVICE_NAME}
      - CHROMA_OTEL_GRANULARITY=${CHROMA_OTEL_GRANULARITY}
      - CHROMA_SERVER_NOFILE=${CHROMA_SERVER_NOFILE}
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*", "http://localhost:3000"]
      #- REQUESTS_CA_BUNDLE=/etc/ssl/certs/__custom__.crt
      #- REQUESTS_SSL_NO_VERIFY=true
    restart: unless-stopped # possible values are: "no", always", "on-failure", "unless-stopped"
    ports:
      - "8000:8000"
    healthcheck:
      # Adjust below to match your container port
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/v2/heartbeat" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - net

  # chroma-ui:
  #   container_name: chroma-ui
  #   image: chroma-ui
  #   build:
  #     context: ../container/chroma-ui
  #     dockerfile: Dockerfile
  #   command: "npm run dev"
  #   environment:
  #     - CHROMA_URL=http://localhost:8000
  #     #- NODE_EXTRA_CA_CERTS=/etc/ssl/certs/__custom__.crt
  #     #- REQUESTS_CA_BUNDLE=/etc/ssl/certs/__custom__.crt
  #     #- REQUESTS_SSL_NO_VERIFY=true
  #   restart: unless-stopped # possible values are: "no", always", "on-failure", "unless-stopped"
  #   ports:
  #     - "3030:3000"
  #   networks:
  #     - net

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    hostname: neo4j
    environment:
      - NEO4J_AUTH=none
      - NEO4JLABS_PLUGINS=["apoc"]
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
    networks:
      - net

  flowise:
    container_name: flowise
    image: flowiseai/flowise:latest
    ports:
      - "3000:3000"
    environment:
      - CORS_ORIGINS=["*"]
      - IFRAME_ORIGINS=["*"]
      #- FLOWISE_USERNAME=
      #- FLOWISE_PASSWORD=
      #- FLOWISE_FILE_SIZE_LIMIT=
      #- DEBUG=
      #- DATABASE_PATH=
      #- DATABASE_TYPE=
      #- DATABASE_PORT=
      #- DATABASE_HOST=
      #- DATABASE_NAME=
      #- DATABASE_USER=
      #- DATABASE_PASSWORD=
      #- DATABASE_SSL=
      #- DATABASE_SSL_KEY_BASE64=
      #- APIKEY_PATH=
      #- SECRETKEY_PATH=
      #- FLOWISE_SECRETKEY_OVERWRITE=
      #- LOG_LEVEL=
      #- LOG_PATH=
      #- BLOB_STORAGE_PATH=
      #- DISABLE_FLOWISE_TELEMETRY=
      #- MODEL_LIST_CONFIG_JSON=
      #- REQUESTS_CA_BUNDLE=/etc/ssl/certs/__custom__.crt
      #- REQUESTS_SSL_NO_VERIFY=true
      #- CURL_CA_BUNDLE=/etc/ssl/certs/__custom__.crt
    volumes:
      - flowise-data:/root/.flowise
    networks:
      - net

  jupyter-notebook:
    container_name: jupyter-notebook
    #image: quay.io/jupyter/scipy-notebook:2024-11-19
    image: jupyter_for_genai
    build:
      context: ../container/jupyter_for_genai
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      - NOTEBOOK_ARGS=--NotebookApp.token='' --ContentsManager.allow_hidden=True
      #- REQUESTS_CA_BUNDLE=/etc/ssl/certs/__custom__.crt
      #- REQUESTS_SSL_NO_VERIFY=true
      #- CURL_CA_BUNDLE=/etc/ssl/certs/__custom__.crt
      #- GIT_SSL_CAINFO=/etc/ssl/certs/__custom__.crt
    volumes:
      - jupyter-workspace:/home/jovyan
      - ./jupyter_config.json:/opt/conda/share/jupyter/lab/settings/overrides.json
      - ./jupyter_pip.conf:/home/jovyan/.config/pip/pip.conf
    working_dir: /home/jovyan/work
    networks:
      - net
  
  code-server:
    container_name: code-server
    #image: codercom/code-server:latest
    image: code-server_for_genai
    build:
      context: ../container/code-server_for_genai
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SUDO_PASSWORD=1111
      #- CODER_ADDITIONAL_CSP_POLICY=default-src 'self'; script-src 'self' http://code-server.local;
      #- CODER_ACCESS_URL=code-server.local
      #- CODER_WILDCARD_ACCESS_URL='*.code-server.local'
      #- CODE_SERVER_PROXY_DOMAIN=code-server.local
      #- ALLOWED_ORIGIN=http://code-server.local
      #- CODER_HTTP_ADDRESS=http://code-server.local
      #- HSTS_HEADER='max-age=31536000; includeSubDomains; preload'
      #- TRUST_HEADER='X-Trusted-Request=true'
      #- CORS_ALLOW_ALL_ORIGINS=true
      #- CORS_ALLOWED_ORIGINS=["*"]
      #- CSP_ALLOWED_ORIGINS=["*"]
      #- NODE_EXTRA_CA_CERTS=/etc/ssl/certs/__custom__.crt
      #- REQUESTS_CA_BUNDLE=/etc/ssl/certs/__custom__.crt
      #- REQUESTS_SSL_NO_VERIFY=true
      #- CURL_CA_BUNDLE=/etc/ssl/certs/__custom__.crt
      #- GIT_SSL_CAINFO=/etc/ssl/certs/__custom__.crt
    volumes:
      - code-workspace:/home/coder/workspace
      - ./code-server_config.yaml:/home/coder/.config/code-server/config.yaml
      - ./code-server_pip.conf:/home/coder/.config/pip/pip.conf
    working_dir: /home/coder/workspace
    networks:
      - net

volumes:
  chroma-data:
    driver: local
  flowise-data:
    driver: local
  jupyter-workspace:
    driver: local
  code-workspace:
    driver: local
  neo4j-data:
    driver: local
